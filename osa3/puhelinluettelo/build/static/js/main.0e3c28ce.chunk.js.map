{"version":3,"sources":["services/persons.js","components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","personObject","post","id","put","delete","Filter","value","onChange","PersonForm","newName","newNumber","addPerson","handleNameChange","handleNumberChange","onSubmit","type","Person","name","number","Persons","filter","persons","deletePerson","person","toLowerCase","includes","map","key","onClick","Notification","notification","notificationType","className","App","useState","setPersons","setNewName","setNewNumber","setFilter","setNotification","setNotificationType","useEffect","personService","initialPersons","event","target","preventDefault","length","find","window","confirm","returnedPerson","catch","error","alert","concat","setTimeout","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0e3c28ce.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n//Moduuli palauttaa olion, jonka kenttinä (getAll, create, update ja deletePerson) \r\n//on tiedon lisäämistä, päivittämista ja poistamista käsittelyä hoitava funktio. \r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = personObject => {\r\n  const request = axios.post(baseUrl, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, personObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, personObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update, \r\n  deletePerson: deletePerson\r\n}","import React from \"react\";\r\n\r\n//Tämä on filtteri, jonka avulla käyttäjä voi syötteen avulla vähentää näytettäviä nimiä ja puhelinnumeroja\r\nconst Filter = ({ value, onChange }) => {\r\n    return (\r\n      <div>\r\n        Filter \r\n        <input\r\n            value={value}\r\n            onChange={onChange}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\nexport default Filter;","import React from 'react'\r\n\r\n//Täällä palautetaan käyttäjän syöttämät tiedot ja annetaan niitä eteenpäin\r\nconst PersonForm = ({newName, newNumber, addPerson, handleNameChange, handleNumberChange }) => \r\n<div>  \r\n    <form onSubmit={addPerson}>\r\n        <div>\r\n        Name:\r\n        <input\r\n            value={newName}\r\n            onChange={handleNameChange}\r\n        />\r\n        </div>\r\n        <div>\r\n        Number:\r\n        <input\r\n            value={newNumber}\r\n            onChange={handleNumberChange}\r\n        />\r\n        </div>\r\n        <div>\r\n            <button\r\n                type=\"submit\">Add\r\n            </button>\r\n        </div>\r\n    </form>\r\n</div>\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\n//Palautetaan henkilön nimi ja puhelinnumero\r\nconst Person = ({ name, number }) => {\r\n  return (\r\n    <li>\r\n        {name} {number}\r\n    </li>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\n//Lähettää kaikki puhelinluettelon henkilöt numeroineen ETSI keino laittaa samalle riville ilman virheitä\r\nconst Persons = ({ filter, persons, deletePerson }) => {\r\n\r\n    return (\r\n        //Vertaa käyttäjän syöttämää filtteriä olemassa oleviin nimiin, huomioimatta isoja ja pieniä kirjaimia\r\n        //Antaa eteenpäin näytettävät nimet filtteröitynä\r\n        persons.filter(person =>\r\n            person.name.toLowerCase().includes(filter.toLowerCase())).map(person =>\r\n        <span key={person.id}>\r\n            <Person \r\n                name={person.name} \r\n                number={person.number} \r\n            />\r\n            <button \r\n                onClick={() => deletePerson(person.id, person.name)}>\r\n                Delete\r\n            </button>\r\n        </span>\r\n        )\r\n    )\r\n}\r\n\r\nexport default Persons","import React from 'react'\r\n\r\n//Ilmoitukset, joita ohjelma tulostaa näytölle käyttäjän painamien painikkeiden perusteella\r\nconst Notification = ({ notification, notificationType }) => {\r\n  if (notification === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={notificationType}>\r\n      {notification}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport personService  from './services/persons'\r\nimport Filter from \"./components/Filter\";\r\nimport PersonForm from './components/PersonForm';\r\nimport Persons from './components/Persons';\r\nimport Notification from \"./components/Notification\";\r\n\r\n//Ohjelma jolla voidaan tallentaa henkilöiden puhelinnumeroita ja filtteröidä nimen perusteella näytettäviä\r\nconst App = () => {\r\n  const [ persons, setPersons ] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState(\"\")\r\n  const [ notification, setNotification ] = useState(null)\r\n  const [ notificationType, setNotificationType ] = useState(null)\r\n\r\n  //Alkutilan hakeminen ja virhe ilmoitus, jos jotain menee pieleen\r\n  useEffect(() => {\r\n    personService      \r\n    .getAll()      \r\n    .then(initialPersons => {\r\n      setPersons(initialPersons)\r\n  })\r\n}, [])\r\n\r\n  //Logataan ja nimen vaihdon kutsu\r\n  const handleNameChange = (event) => {    \r\n    //console.log(event.target.value)    \r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  //Logataan ja hoidetaan numeron vaihdon kutsu\r\n    const handleNumberChange = (event) => {\r\n      //console.log(event.target.value) \r\n      setNewNumber(event.target.value)\r\n  }\r\n  \r\n  //Käsitellään käyttäjän syöttämän filtterin muutos\r\n  const handleFilterChange = (event) => {\r\n    setFilter(event.target.value)\r\n  }\r\n\r\n  \r\n  //Lisätään uusi ihminen tietoineen\r\n  const addPerson = (event) => {    \r\n    event.preventDefault()    \r\n    //console.log('button clicked', event.target) \r\n    const personObject = {\r\n      //id: persons.length + 1, //TÄMÄ PITÄÄ MUUTTAA JOKSIKIN MUUKSI KOSKA JOS VÄLISTÄ POISTAA TULEE VIRHE\r\n      name: newName,\r\n      number: newNumber,\r\n      id: persons.length + 1\r\n    }\r\n\r\n    //Tarkastetaan että nimi ei ole tyhjä\r\n    if (newName !== '' && newNumber !== '') {       \r\n      //Tarkastetaan onko nimi jo puhelinluettelossa, tarkastetaan pienillä kirjaimilla joten fontilla ei väliä\r\n      if (persons.find(person => person.name.toLowerCase() === newName.toLowerCase())){\r\n        //console.log(\"Tää nimihän löyty\")\r\n        //window.alert(newName, \" is already added to phonebook, pleace change the name\")\r\n        setNotificationType('error')\r\n        setNotification(`${newName} is already added to phonebook pleace change the name`)\r\n        \r\n        const id = persons.find((person) => {\r\n          return person.name === personObject.name;\r\n        }).id;\r\n\r\n        if(window.confirm(`${newName} is already added to phonebook, do you want to change the number?`)){\r\n          personService\r\n            .update(id, personObject)\r\n            .then(returnedPerson => {        \r\n              setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\r\n              \r\n              setNotificationType('confirmation')\r\n              setNotification(`Information of ${newName} has been updated succesfully`)\r\n            })\r\n            .catch(error => {      \r\n              alert(        \r\n                `${newName} was already added to server in another session`      \r\n                )      \r\n                setPersons(persons.filter(person => person.id !== id))    \r\n            })\r\n        }\r\n        else {\r\n          setNotificationType('error')\r\n          setNotification(`Information of ${newName} has been updated in another session`)\r\n          setPersons(persons.filter(person => person.id !== id))\r\n        }\r\n      }\r\n\r\n      //Jos nimi ei ole luettelossa lisätään normaalisti luetteloon\r\n      else{\r\n        //Täällä luodaan uusi nimi ja tallennetaan annettu data db.json tiedostoon\r\n        personService    \r\n          .create(personObject)    \r\n          .then(returnedPerson => {      \r\n            setPersons(persons.concat(returnedPerson))\r\n            //console.log(\"New person and number saved\", response)  \r\n            setNotificationType('confirmation')\r\n            setNotification(`Added ${newName}`)\r\n          })\r\n          .catch(error => {      \r\n            alert(        \r\n              `${newName} changes have been made by other session`      \r\n              )      \r\n              //setPersons(persons.filter(person => person.id !== id))    \r\n          })\r\n      }\r\n      setNewName('')\r\n      setNewNumber('')\r\n    }\r\n\r\n    //Jos käyttäjä yrittää tallentaa tyhjää nimeä luetteloon tulee virhe\r\n    else {\r\n      //window.alert(`The name or number can't be empty`)\r\n      setNotificationType('error')\r\n      setNotification(`The name or number can't be empty`)\r\n      //Tällä saadaan yllä oleva viesti katoamaan 5 sekunnin jälkeen\r\n\r\n    }\r\n    //Tällä voidaan asettaa viive, jonka jälkeen viestit hävitetään\r\n    setTimeout(() => {\r\n      setNotification(null)\r\n      setNotificationType('error')\r\n    }, 5000)\r\n  }\r\n\r\n\r\n/*\r\n//Uudelleen tehty pieni versio note esimerkin mukaisesti.\r\nconst addPerson = (event) => {\r\n  event.preventDefault()\r\n  const personObject = {\r\n    name: newName,\r\n    number: newNumber,\r\n    id: persons.length + 1\r\n  }\r\n\r\n  personService\r\n    .create(personObject)\r\n    .then(returnedPerson => {\r\n      setPersons(persons.concat(returnedPerson))\r\n      setNewName('')\r\n      setNewNumber('')\r\n    })\r\n}\r\n*/\r\n\r\n\r\n  //Poistetaan haluttu yhteystieto puhelinluettelosta toimii eventillä mutta ei id:llä jostain syystä\r\n  const deletePerson = (id, name) => {\r\n    if(window.confirm(`Do you want to delete ${name}?`)){\r\n      personService\r\n        .deletePerson(id)\r\n        .then(() =>  {\r\n          setPersons(persons.filter(person => person.id !== id) )\r\n          console.log(\"Poistettiin onnistuneesti \", name)\r\n          setNotificationType('confirmation')\r\n          setNotification(`Information of ${name} has been removed from the server`)\r\n        })\r\n        .catch(error => {      \r\n          alert(        \r\n            `${name} was already deleted from server`      \r\n            )      \r\n            setPersons(persons.filter(person => person.id !== id))    \r\n        })\r\n    }\r\n    //Tällä voidaan asettaa viive, jonka jälkeen viestit hävitetään\r\n    setTimeout(() => {\r\n      setNotification(null)\r\n      setNotificationType('error')\r\n    }, 5000)\r\n  }\r\n\r\n  //Täällä haetaan tulostettavia tietoja ja lähetetään otsikot printattaviksi\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n\r\n      <Filter \r\n        value={filter} \r\n        onChange={handleFilterChange} \r\n      />\r\n\r\n      <Notification notification={notification} notificationType={notificationType} />\r\n\r\n      <h2>Add a new Person and number</h2>\r\n\r\n      <PersonForm\r\n          newName = {newName}\r\n          newNumber = {newNumber}\r\n          addPerson = {addPerson}\r\n          handleNameChange = {handleNameChange}\r\n          handleNumberChange = {handleNumberChange}\r\n      />\r\n\r\n      <h2>Names and numbers</h2>\r\n        <Persons\r\n          filter = {filter} \r\n          persons = {persons}\r\n          deletePerson = {deletePerson}\r\n        />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\n  ReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}